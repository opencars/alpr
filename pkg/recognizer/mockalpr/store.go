// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opencars/alpr/pkg/recognizer (interfaces: Recognizer)

// Package mockalpr is a generated GoMock package.
package mockalpr

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	recognizer "github.com/opencars/alpr/pkg/recognizer"
)

// MockRecognizer is a mock of Recognizer interface
type MockRecognizer struct {
	ctrl     *gomock.Controller
	recorder *MockRecognizerMockRecorder
}

// MockRecognizerMockRecorder is the mock recorder for MockRecognizer
type MockRecognizerMockRecorder struct {
	mock *MockRecognizer
}

// NewMockRecognizer creates a new mock instance
func NewMockRecognizer(ctrl *gomock.Controller) *MockRecognizer {
	mock := &MockRecognizer{ctrl: ctrl}
	mock.recorder = &MockRecognizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRecognizer) EXPECT() *MockRecognizerMockRecorder {
	return m.recorder
}

// Recognize mocks base method
func (m *MockRecognizer) Recognize(arg0 io.Reader) ([]recognizer.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recognize", arg0)
	ret0, _ := ret[0].([]recognizer.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recognize indicates an expected call of Recognize
func (mr *MockRecognizerMockRecorder) Recognize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recognize", reflect.TypeOf((*MockRecognizer)(nil).Recognize), arg0)
}
